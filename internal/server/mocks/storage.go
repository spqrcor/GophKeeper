// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "GophKeeper/internal/server/storage"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockStorage) AddItem(ctx context.Context, item storage.CommonData, userID, pin string, fileBytes []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, item, userID, pin, fileBytes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockStorageMockRecorder) AddItem(ctx, item, userID, pin, fileBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockStorage)(nil).AddItem), ctx, item, userID, pin, fileBytes)
}

// GetItem mocks base method.
func (m *MockStorage) GetItem(ctx context.Context, userID, itemId, pin string) (storage.CommonData, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, userID, itemId, pin)
	ret0, _ := ret[0].(storage.CommonData)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetItem indicates an expected call of GetItem.
func (mr *MockStorageMockRecorder) GetItem(ctx, userID, itemId, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStorage)(nil).GetItem), ctx, userID, itemId, pin)
}

// GetItems mocks base method.
func (m *MockStorage) GetItems(ctx context.Context, userID, pin string) ([]storage.CommonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, userID, pin)
	ret0, _ := ret[0].([]storage.CommonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockStorageMockRecorder) GetItems(ctx, userID, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockStorage)(nil).GetItems), ctx, userID, pin)
}

// Login mocks base method.
func (m *MockStorage) Login(ctx context.Context, input storage.InputDataUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), ctx, input)
}

// Register mocks base method.
func (m *MockStorage) Register(ctx context.Context, input storage.InputDataUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), ctx, input)
}

// RemoveItem mocks base method.
func (m *MockStorage) RemoveItem(ctx context.Context, userID, itemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", ctx, userID, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockStorageMockRecorder) RemoveItem(ctx, userID, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockStorage)(nil).RemoveItem), ctx, userID, itemId)
}

// ShutDown mocks base method.
func (m *MockStorage) ShutDown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockStorageMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockStorage)(nil).ShutDown))
}
